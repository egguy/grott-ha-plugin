[project]
name = "grott-ha-plugin"
dynamic = ["version"]
description = "An extension for grott to enable HA support"
authors = [
    { name = "egguy", email = "etienne.guilluy@gmail.com" },
]
dependencies = [
    "paho-mqtt ~= 1.6.1",
]
requires-python = ">=3.8"
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project.urls]
Repository = "https://github.com/egguy/grott-ha-plugin"
Homepage = "https://github.com/egguy/grott-ha-plugin"

[project.optional-dependencies]
lint = [
    "ruff>=0.1.3",
    "mypy>=1.6.1",
]
test = [
    "pytest>=7.4.2",
    "coverage[toml]>=6.5",
    "nox>=2023.4.22",
]
[tool.pdm.dev-dependencies]
duty = ["duty>=0.10"]
ci-quality = ["grott-ha-plugin[duty,docs,quality,typing,security]"]
ci-tests = ["grott-ha-plugin[duty,tests]"]
dev = [
    "pytest>=7.4.2",
    "ruff>=0.1.3",
    "black>=23.10.0",
    "mypy>=1.6.1",
    "coverage[toml]>=6.5",
    "nox>=2023.4.22",
    "hypothesis>=6.88.1",
    "towncrier>=19.2",
    "parver>=0.3",
]
docs = [
    "black>=23.9",
    "markdown-callouts>=0.3",
    "markdown-exec>=1.7",
    "mkdocs>=1.5",
    "mkdocs-coverage>=1.0",
    "mkdocs-gen-files>=0.5",
    "mkdocs-git-committers-plugin-2>=1.2",
#    {#- "mkdocs-git-revision-date-localized-plugin>=1.2", #}
    "mkdocs-literate-nav>=0.6",
    "mkdocs-material>=9.4",
    "mkdocs-minify-plugin>=0.7",
    "mkdocstrings[python]>=0.23",
    "tomli>=2.0; python_version < '3.11'",
]
quality = [
    "ruff>=0.0",
]
maintain = [
    "black>=23.9",
    "blacken-docs>=1.16",
    "git-changelog>=2.3",
]
tests = [
    "pytest>=7.4.2",
    "coverage[toml]>=6.5",
    "nox>=2023.4.22",
]
typing = [
    "mypy>=1.6.1",
    "types-markdown>=3.5",
    "types-pyyaml>=6.0",
]
security = [
    "safety>=2.3",
]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]
pythonpath = "src"

[tool.mypy]
disallow_untyped_defs = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "SIM",
    #  "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
    "ISC001",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]
exclude = [
    "site",
    "tasks"
]


[tool.ruff.isort]
known-first-party = ["grott", "grottext"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use relative imports and assertions
"tests/**/*" = ["TID252", "S101", "PLR2004", "ARG", "FBT"]

[tool.coverage.run]
source_pkgs = [ "tests"]
branch = true
parallel = true
source = ["src/", "tests/"]
omit = [
  "src/*/__init__.py",
  "src/*/__main__.py",
  "tests/*"
]

[tool.coverage.paths]
source= ["src/"]
#hatch_showcase = ["src/grott", "*//src/hatch_showcase"]
tests = ["tests/"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.json]
output = "htmlcov/coverage.json"

[tool.pdm.version]
source = "scm"
write_to = "src/grottext/ha/__version__.py"
write_template = "__version__ = \"{}\""

[tool.pdm]
plugins = [
    "pdm-multirun",
]

[tool.pdm.scripts]
lint = {shell = "ruff check . --fix  && ruff format . && mypy --strict --install-types --non-interactive src/"}
release = "python -m tasks.release"
test = "pytest tests/"
doc = {shell = "mkdocs serve", help = "Start the dev server for doc preview"}

[tool.towncrier]
package = "grottext.ha"
package_dir = "src"
filename = "CHANGELOG.md"
issue_format = "{{'[#{issue}]'}}(https://github.com/egguy/grott-ha-plugin/issues/{issue})"
directory = "news/"
start_string = "<!-- insertion marker -->"
title_format = "[v{version}](https://github.com/egguy/grott-ha-plugin/releases/tag/{version}) ({project_date})"
template = "news/towncrier_template.md"
underlines = "-~^"

[[tool.towncrier.type]]
directory = "feature"
name = "Features & Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bug Fixes"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Improved Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "dep"
name = "Dependencies"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "Removals and Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellany"
showcontent = true
