[project]
name = "grott-ha"
dynamic = ["version"]
description = "An extension for grott to add the HA support"
authors = [
    { name = "egguy", email = "etienne.guilluy@gmail.com" },
]
dependencies = [
    "paho-mqtt ~= 1.6.1",
]
requires-python = ">=3.9"
readme = "README.md"
license = { text = "MIT" }

[project.optional-dependencies]
lint = [
    "ruff>=0.1.3",
    "mypy>=1.6.1",
]
test = [
    "pytest>=7.4.2",
    "coverage[toml]>=6.5",
    "nox>=2023.4.22",
]
[tool.pdm.dev-dependencies]
dev = [
    "pytest>=7.4.2",
    "ruff>=0.1.3",
    "black>=23.10.0",
    "mypy>=1.6.1",
    "coverage[toml]>=6.5",
    "nox>=2023.4.22",
    "hypothesis>=6.88.1",
]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]
pythonpath = "src"

[tool.mypy]
disallow_untyped_defs = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "SIM",
    #  "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
    "ISC001",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.isort]
known-first-party = ["grott"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use relative imports and assertions
"tests/**/*" = ["TID252", "S101", "PLR2004", "ARG", "FBT"]

[tool.coverage.run]
source_pkgs = ["hatch_showcase", "tests"]
branch = true
parallel = true
#omit = [
#  "src/grott/__main__.py",
#]

#[tool.coverage.paths]
#hatch_showcase = ["src/grott", "*//src/hatch_showcase"]
#tests = ["tests", "*/hatch-showcase/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pdm]
version = { source = "file", path = "grott/extension/ha/__init__.py" }
